Assignment 1 due tues (midnight)
Assignment 2 posted now


Similarity Search
Problem: How to quickly find similar items

2 settings: 1) within dataset
            2) quickly processing a new point

Problem: What does "similar" mean?

Motivation / applications:
  1. Similar documents / webpages / deduplication / genomic data
  2. Collaborative filtering
  3. Machine learning / classification
  4. Combining datasets (astronomy)
  5. Super fast labelling (ie. CERN / LHC) ~5 * 10^14 p-p collisions

Similarity Measure
Jaccard similarity between sets S, T
    J(S, T) = |S intersect T| / |S Union T|

        a b c d e
    S = 2 1 1 0 0
    T = 1 0 1 1 0

    J(S, T) = (\sum_i min(S_i, T_i)) / (\sum_i max(S_i, T_i))

    e.g. documents -> set of words "bag of words model"
         individuals -> set of purchases

Euclidean distance / L_2 distance
    points / vectors \in R^d
    D_{Euc}(x, y) = ||x - y||_2 = (\sum_{i = 1}^d (x_i - y_i)^2)^{1/2}
    Rotation invariant

L_1 distance
    ||x - y||_1 = \sum_{i = 1}^d |x_i - y_i|
    Rotation dependent - depends on your choice of bases / coordinate axes
    Apply it in settings where coordinates matter

Lots more similarity metrics

e.g. L_p distances ||x - y|_p = (\sum_i |x_i - y_i|^p)^{1 / p}
     cosine similarity
     edit distance (for strings)

"metric embeddings" - study of similarity metrics
Given {x_1, ..., x_n}, can you find {y_1, ..., y_n} such that D(x_i, x_j) ~= D'(y_i, y_j)

Algorithms that work with Euclidean distance

Voronoi diagrams
    partition of space according to the closest element of a set

  \    x   /
x   \   /    x
     /    \
   /   x    \


Kd-tree (Bentley '75)
Tons of variants

Works extremely well in practice with k < 20

Idea: Make a balanced binary tree that partitions space

Alg: Given set of points:
     1) pick a dimension
     2) m = median of ith coordinate of points
     3) partition according to m
           S_1, S_2
     4) recurse on S_1, S_2

To find the closest point to y:
1) Find smallest region in which y lies
2) Go up tree asking "could the closest point lie in the region defined by each edge"


Size: <= linear in #points
lookup time: log(# points)*
* as long as we don't need to check too many buckets

but the number of buckets to check is exponential in k

e.g. k = 1: 2 buckets
     k = 2: 4 buckets
     k = 3: 8 buckets
     2^k buckets to check, worst case

if number of points > 2^k, then the algorithm is good

Question: Why are high dimensional spaces hard?
One answer: they lack the geometry

