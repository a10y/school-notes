web.stanford.edu/class/cs168/index.html

Consistent Hashing

simple
reusable
transcends the applications we discuss
repurposed in many different technologies


Initial motivation ('97): Web caching (Akamai - major internet company)
Goal: Cache shared by lots of users
Issue: cache might not fit on a single machine
Q: How to keep track of what's where
Idea: Use a hash funciton
Recall:

Universe U (urls) --> Buckets (caches)
hash function h

a "good" hash function:
- easy to evaluate
- h(x)'s ~ uniformly spread out

hash functions grow on trees, sort of

Solution: Let n = # of caches (0, 1, ..., n - 1)
- Store the page with url x in the cache h(x) % n

=> works great for fixed n

Issue: what if n changes? (P2P network)
=> Almost all data needs to switch caches

For any algorithm / data structure:

What is the point ?
What is the exact implementation?

1) same functionality as a hash table + stability (hash value remains typically unchanged as you vary the number of buckets)
2) As follows:

Key idea: hash objects AND servers to some range

<-32 bit vals array->
+-+-+-+-+-+-+-+-+-+-+
| | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+
   ^   ^     ^
   |   |     |
   |   |     h(server #2)
   |   |
   |   h(amazon.com)
   |
   h(server #1)

hash amazon.com, scan to the right until you reach a server hash

(Often drawn as a ring, scanning clockwise)

Location of x
- compute h(x)
- scan right until hit h(s) for some server s
- store x at s

Properties
1) provided h is a good hash function, expect each of the n servers to get 1/n objects on average (by symmetry)
2) add a new server => expect only a 1/(n + 1) fraction of objects to migrate

To implement lookup(x):
Store hashes of caches in a balanced binary search tree



Topics:
1. Week 1) Modern hashing, data structures (bloom filters, compress data lossily but identify functions you care about)
2. Week 2) LSH / nearest neighbor problem
3. Week 3) Sampling / estimation (view data set as if sampled from an unknown distribution; take samples in a smart way)
4. Week 4 - 5) "Spectral techniques" / linear algebra
5. Week 6 - ) The "fourier perspective" (change basis with which you represent data)
6. Week 7 - mathematical programming (linear, integer, convex programming)
7. gradient descent (continuous optimization)

Goals / Themes
1. cool
2. capstone
3. general
Theme: be smart with your data

Deliverables:
- 8 - 9 "mini-projects" out mondays, due tuesdays (75% - lowest dropped, no late days)
- in-class exam June 8th 8:30 - 11:30 (25% - straightforward from lectures)

Timeline
'97 - original STOC paper
March 31st, '99 - Star Wars / Apple
April 1st - Paul Sagan hangs up on Steve Jobs
'01 - Chord
'06 - Amazon Dynamo

